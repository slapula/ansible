---
- block:
  - name: FILE_S3 -- set connection information for all tasks
    set_fact:
      aws_connection_info: &aws_connection_info
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region }}"
    no_log: true

  - name: FILE_S3 -- ensure S3 bucket exists
    s3_bucket:
      state: present
      name: "{{ resource_prefix }}-test-nfs-bucket"
      <<: *aws_connection_info

  - name: FILE_S3 -- ensure IAM role exists
    iam_role:
      name: "{{ resource_prefix }}-test-storage-iam-role"
      assume_role_policy_document: "{{ lookup('file','storagegateway-trust-policy.json') }}"
      state: present
      create_instance_profile: no
      <<: *aws_connection_info
    register: storage_iam_role

  - name: FILE_S3 -- ensure S3 access for IAM role
    iam_policy:
      <<: *aws_connection_info
      iam_type: role
      iam_name: "{{ resource_prefix }}-test-storage-iam-role"
      policy_name: "{{ resource_prefix }}-test-storage-iam-policy"
      state: present
      policy_json: "{{ lookup( 'template', 's3-bucket-policy.json.j2') }}"

  - name: FILE_S3 -- Create storage gateway instance
    ec2_instance:
      name: "{{ resource_prefix }}-test-file-gateway"
      image_id: "{{ ec2_file_ami_image[aws_region] }}"
      tags:
        TestId: "{{ resource_prefix }}"
      security_groups: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ testing_subnet.subnet.id }}"
      network:
        assign_public_ip: true
      instance_type: m4.xlarge
      volumes:
        - device_name: /dev/sdb
          ebs:
            volume_size: 150
            delete_on_termination: true
            volume_type: standard
      <<: *aws_connection_info
    register: gateway_instance

  - name: FILE_S3 -- Send storage gateway activation code request
    uri:
      url: "http://{{ gateway_instance.instances[0].public_ip_address }}/?activationRegion={{ aws_region }}"
    retries: 10
    register: code_request

  - name: FILE_S3 -- Extract activation code from request
    shell: echo "{{ code_request.url }}" | awk -F'[=&]' '{print $2}'
    register: activation_code

  - name: FILE_S3 -- Activate file gateway for testing
    aws_storage_gateway:
      name: "{{ resource_prefix }}-test-file-gateway"
      state: present
      resource_type: gateway
      activation_key: "{{ activation_code.stdout }}"
      timezone: 'GMT-6:00'
      gateway_region: "{{ aws_region }}"
      gateway_type: 'FILE_S3'
      <<: *aws_connection_info
    register: file_gateway

  - name: assert changed is True
    assert:
      that:
        - file_gateway.changed == True
        - file_gateway.results['GatewayARN']

  - name: FILE_S3 -- Create NFS file share
    aws_storage_gateway:
      state: present
      resource_type: nfs_file_share
      nfs_token: '5734980946'
      gateway_arn: "{{ file_gateway.results['GatewayARN'] }}"
      iam_role: "{{ storage_iam_role.arn }}"
      location_arn: "arn:aws:s3:::{{ resource_prefix }}-test-nfs-bucket"
      <<: *aws_connection_info
    register: nfs_file_share

  - name: assert changed is True
    assert:
      that:
        - nfs_file_share.changed == True
        - nfs_file_share.results['FileShareARN']

  - name: FILE_S3 -- No changes to NFS gateway
    aws_storage_gateway:
      name: "{{ resource_prefix }}-test-file-gateway"
      state: present
      resource_type: gateway
      activation_key: "{{ activation_code.stdout }}"
      timezone: 'GMT-6:00'
      gateway_region: "{{ aws_region }}"
      gateway_type: 'FILE_S3'
      <<: *aws_connection_info
    register: file_gateway

  - name: assert changed is False
    assert:
      that:
        - file_gateway.changed == False

  - name: FILE_S3 -- No changes to NFS file share
    aws_storage_gateway:
      state: present
      resource_type: nfs_file_share
      nfs_token: '5734980946'
      gateway_arn: "{{ file_gateway.results['GatewayARN'] }}"
      iam_role: "{{ storage_iam_role.arn }}"
      location_arn: "arn:aws:s3:::{{ resource_prefix }}-test-nfs-bucket"
      <<: *aws_connection_info
    register: nfs_file_share

  - name: assert changed is False
    assert:
      that:
        - nfs_file_share.changed == False

  - name: FILE_S3 -- Update NFS gateway
    aws_storage_gateway:
      name: "{{ resource_prefix }}-test-file-gateway"
      state: present
      resource_type: gateway
      activation_key: "{{ activation_code.stdout }}"
      timezone: 'GMT-7:00'
      gateway_region: "{{ aws_region }}"
      gateway_type: 'FILE_S3'
      <<: *aws_connection_info
    register: file_gateway

  - name: assert changed is True
    assert:
      that:
        - file_gateway.changed == True
        - file_gateway.results['GatewayARN']

  - name: FILE_S3 -- Update NFS file share
    aws_storage_gateway:
      state: present
      resource_type: nfs_file_share
      nfs_token: '5734980946'
      gateway_arn: "{{ file_gateway.results['GatewayARN'] }}"
      iam_role: "{{ storage_iam_role.arn }}"
      location_arn: "arn:aws:s3:::{{ resource_prefix }}-test-nfs-bucket"
      default_storage_class: 'S3_STANDARD_IA'
      <<: *aws_connection_info
    register: nfs_file_share

  - name: assert changed is True
    assert:
      that:
        - nfs_file_share.changed == True
        - nfs_file_share.results['FileShareARN']

  always:
  - name: FILE_S3 -- Tear down NFS file share
    aws_storage_gateway:
      state: absent
      resource_type: nfs_file_share
      nfs_token: '5734980946'
      gateway_arn: "{{ file_gateway.results['GatewayARN'] }}"
      iam_role: "{{ storage_iam_role.arn }}"
      location_arn: "arn:aws:s3:::{{ resource_prefix }}-test-nfs-bucket"
      <<: *aws_connection_info
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 5

  - name: FILE_S3 -- Deactivate NFS gateway
    aws_storage_gateway:
      name: "{{ resource_prefix }}-test-file-gateway"
      state: absent
      resource_type: gateway
      activation_key: "{{ activation_code.stdout }}"
      timezone: 'GMT-6:00'
      gateway_region: "{{ aws_region }}"
      gateway_type: 'FILE_S3'
      <<: *aws_connection_info
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 5

  - name: FILE_S3 -- Tear down S3 access for IAM role
    iam_policy:
      <<: *aws_connection_info
      iam_type: role
      iam_name: "{{ resource_prefix }}-test-storage-iam-role"
      policy_name: "{{ resource_prefix }}-test-storage-iam-policy"
      state: absent
      policy_json: "{{ lookup( 'template', 's3-bucket-policy.json.j2') }}"
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 5

  - name: FILE_S3 -- Tear down IAM role
    iam_role:
      name: "{{ resource_prefix }}-test-storage-iam-role"
      assume_role_policy_document: "{{ lookup('file','storagegateway-trust-policy.json') }}"
      state: absent
      create_instance_profile: no
      <<: *aws_connection_info
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 5

  - name: FILE_S3 -- Tear down S3 bucket
    s3_bucket:
      state: absent
      name: "{{ resource_prefix }}-test-nfs-bucket"
      <<: *aws_connection_info
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 5
